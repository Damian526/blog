// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int         @id @default(autoincrement())
  name               String
  email              String      @unique
  password           String
  profilePicture     String?     // URL to profile picture stored in Supabase
  
  // Simple status system
  status             UserStatus  @default(PENDING)
  isExpert           Boolean     @default(false)  // Can write articles
  
  // Simple verification tracking (no separate table needed)
  verificationReason String?     // Why user wants to be verified
  portfolioUrl       String?     // Portfolio/GitHub link
  approvedBy         Int?        // Admin who approved
  approvedAt         DateTime?   // When approved
  
  posts              Post[]
  discussions        Discussion[] // New: user discussions
  comments           Comment[]   // A user can author many comments
  createdAt          DateTime    @default(now())
  role               Role        @default(USER)
  verified           Boolean     @default(false)
  verificationToken  String?
}

// Simple Discussion model
model Discussion {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  type       DiscussionType @default(DISCUSSION)
  
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id            Int       @id @default(autoincrement())
  title         String
  content       String?
  type          PostType  @default(ARTICLE) // New: article type
  published     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  authorId      Int
  author        User      @relation(fields: [authorId], references: [id])
  comments      Comment[]
  declineReason String?
  subcategories Subcategory[] @relation("PostSubcategories")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())

  // Relations - can comment on posts or discussions
  postId       Int?
  post         Post?       @relation(fields: [postId], references: [id])
  discussionId Int?
  discussion   Discussion? @relation(fields: [discussionId], references: [id])
  
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  // Self-referencing relation for replies
  parentId   Int?
  parent     Comment? @relation(name: "CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation(name: "CommentReplies")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subcategories Subcategory[] // One-to-many relationship with Subcategory
  discussions   Discussion[]  // New: discussions in category
  createdAt     DateTime      @default(now())
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int       // Foreign key to Category
  category   Category  @relation(fields: [categoryId], references: [id])
  posts      Post[]    @relation("PostSubcategories")
  createdAt  DateTime  @default(now())

  @@unique([name, categoryId])
}

enum Role {
  ADMIN
  USER
}

// Simple user status
enum UserStatus {
  PENDING    // Waiting admin approval (can only read)
  APPROVED   // Can create discussions
  VERIFIED   // Can write articles (isExpert = true)
}

// Simple post types
enum PostType {
  ARTICLE    // Professional articles (for verified users)
  TUTORIAL   // Tutorials
}

// Simple discussion types  
enum DiscussionType {
  QUESTION    // Questions
  DISCUSSION  // General discussion
  HELP        // Help requests
}
