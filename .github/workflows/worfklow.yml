name: CI + Vercel Deploy

on:
  pull_request:
    branches: [main, development] # CI on PRs
  push:
    branches: [main, development] # deploys only on push

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: CI (Install → Prisma Generate → Build → Test)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      - run: yarn install --frozen-lockfile
      - run: yarn prisma generate

      - run: yarn type-check
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - run: yarn build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - run: yarn test

  deploy-preview:
    name: Deploy Preview (development)
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      # Install dependencies and generate Prisma client
      - run: yarn install --frozen-lockfile
      - run: yarn prisma generate

      # ensure no stale link, then create a fresh one
      - run: rm -rf .vercel && mkdir -p .vercel
      - name: Validate Vercel IDs
        run: |
          case "$VERCEL_PROJECT_ID" in prj_*) ;; *) echo "❌ VERCEL_PROJECT_ID must start with prj_"; exit 1;; esac
          case "$VERCEL_ORG_ID" in team_*|user_*) ;; *) echo "❌ VERCEL_ORG_ID must start with team_ or user_"; exit 1;; esac
          if printf %s "$VERCEL_PROJECT_ID" | grep -q '[#[:space:]]'; then
            echo "❌ VERCEL_PROJECT_ID contains spaces or # characters"; exit 1
          fi

      - name: Link to Vercel project
        run: |
          printf '{"projectId":"%s","orgId":"%s"}' "$VERCEL_PROJECT_ID" "$VERCEL_ORG_ID" > .vercel/project.json

      - run: npm i -g vercel@latest

      - name: Pull env (preview)
        run: vercel pull --yes --environment=preview --token "$VERCEL_TOKEN"

      - name: Build (preview)
        run: vercel build --token "$VERCEL_TOKEN"

      - name: Deploy (preview)
        run: vercel deploy --prebuilt --token "$VERCEL_TOKEN"

  deploy-production:
    name: Deploy Production (main)
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'

      # Install dependencies and generate Prisma client
      - run: yarn install --frozen-lockfile
      - run: yarn prisma generate

      # ensure no stale link, then create a fresh one
      - run: rm -rf .vercel && mkdir -p .vercel
      - name: Validate Vercel IDs
        run: |
          case "$VERCEL_PROJECT_ID" in prj_*) ;; *) echo "❌ VERCEL_PROJECT_ID must start with prj_"; exit 1;; esac
          case "$VERCEL_ORG_ID" in team_*|user_*) ;; *) echo "❌ VERCEL_ORG_ID must start with team_ or user_"; exit 1;; esac
          if printf %s "$VERCEL_PROJECT_ID" | grep -q '[#[:space:]]'; then
            echo "❌ VERCEL_PROJECT_ID contains spaces or # characters"; exit 1
          fi

      - name: Link to Vercel project
        run: |
          printf '{"projectId":"%s","orgId":"%s"}' "$VERCEL_PROJECT_ID" "$VERCEL_ORG_ID" > .vercel/project.json

      - run: npm i -g vercel@latest

      - name: Pull env (production)
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build (production)
        run: vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy (production)
        run: vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
